#!/bin/bash
# ////////////////////////////////////////////////////////////////////////////////
# //BOCA Online Contest Administrator
# //    Copyright (C) 2003-2014 by BOCA System (bocasystem@gmail.com)
# //
# //    This program is free software: you can redistribute it and/or modify
# //    it under the terms of the GNU General Public License as published by
# //    the Free Software Foundation, either version 3 of the License, or
# //    (at your option) any later version.
# //
# //    This program is distributed in the hope that it will be useful,
# //    but WITHOUT ANY WARRANTY; without even the implied warranty of
# //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# //    GNU General Public License for more details.
# //    You should have received a copy of the GNU General Public License
# //    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ////////////////////////////////////////////////////////////////////////////////
#Last modified: 21/aug/2014 by cassio@ime.usp.br
#
# parameters are:
# $1 exe_file
# $2 input_file
# $3 timelimit (limit to run all the repetitions, by default only one repetition)
# $4 number_of_repetitions_to_run (optional, can be used for better tuning the timelimit)
# $5 maximum allowed memory (in MBytes)
# $6 maximum allowed output size (in KBytes)
#
# the output of the submission should be directed to the standard output
#
# the return code show what happened (according to safeexec):
# 0 ok
# 1 compile error
# 2 runtime error
# 3 timelimit exceeded
# 4 internal error
# 5 parameter error
# 6 internal error
# 7 memory limit exceeded
# 8 security threat
# 9 runtime error
# other_codes are unknown to boca: in this case BOCA will present the
#                                  last line of standard output to the judge

umask 0022
id -u bocajail >/dev/null 2>/dev/null
if [ $? == 0 ]; then
	bocau=`id -u bocajail`
	bocag=`id -g bocajail`
	chown bocajail.nogroup .
else
	bocau=`id -u nobody`
	bocag=`id -g nobody`
	chown nobody.nogroup .
fi
if [ "$bocau" == "" -o "$bocag" == "" ]; then
	echo "error finding user to run script"
	exit 43
fi

# this script makes use of safeexec to execute the code with less privilegies
# make sure that directories below are correct.
sf=`which safeexec`
[ -x "$sf" ] || sf=/usr/bin/safeexec

if [ "$1" == "" -o "$2" == "" -o "$3" == "" ]; then
    echo "parameter problem"
    exit 43
fi
#if [ ! -x "$1" ]; then
#    echo "$1 not found (or is not in the current dir) or it's not executable"
#    exit 44
#fi
if [ ! -r "$2" ]; then
    echo "$2 not found (or is not in the current dir) or it's not readable"
    exit 45
fi
if [ ! -x "$sf" ]; then
    echo "$sf not found or it's not executable"
    exit 46
fi

time=$3
if [ "$time" -gt "0" ]; then
  let "ttime = $time + 30"
else
  time=1
  ttime=30
fi

nruns=1
if [ "$4" != "" ]; then
  if [ "$4" -gt "0" ]; then
    nruns=$4
  fi
fi
maxm=512000
if [ "$5" != "" ]; then
  if [ "$5" -gt "0" ]; then
    maxm=${5}000
  fi
fi
maxf=1024
if [ "$6" != "" ]; then
  if [ "$6" -gt "0" ]; then
    maxf=${6}
  fi
fi

############################################################
# Last modified: 21/november/2019 by rlaiola@inf.ufes.br

echo "##################"
echo "RUNNING QUERIES..."
echo "##################"

dbclient=`which mysql`
[ -x "$dbclient" ] || dbclient=/usr/bin/mysql
if [ ! -x "$dbclient" ]; then
    echo "$dbclient not found or it's not executable"
    exit 47
fi

echo "Read database credentials..."
# https://askubuntu.com/questions/367136/how-do-i-read-a-variable-from-a-file
source ../zip_src/db/db.conf

echo "Read queries (key and proposed solution)..."
# https://stackoverflow.com/questions/7427262/how-to-read-a-file-into-a-variable-in-shell
key=$(<../zip_src/db/key.sql)
name="../*.sql"
script=`cat $name`
#echo "$key"
#echo "$script"

# Remove ; from queries
# https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script/13210909
key=${key//;/}
script=${script//;/}
#echo "$key"
#echo "$script"

# Add \ to quotes
# https://www.linuxquestions.org/questions/programming-9/bash-script-how-to-add-slashes-to-quotations-for-sending-to-mysql-464822/
key=${key//\"/\\\"}
key=${key//\'/\\\'}
script=${script//\"/\\\"}
script=${script//\'/\\\'}
#echo "$key"
#echo "$script"

echo "Run and compare queries..."
# https://stackoverflow.com/questions/9558867/how-to-fetch-field-from-mysql-query-result-in-bash
result=`$dbclient -u $user -p$password -h $host --port $port $database -s -N -e "SET max_execution_time = $ttime; SET @result = 0; call execAndCompareSQLSelect('$key', '$script', FALSE, @result); select @result;" 2> /dev/null`
#result=1
#echo $result

# Get the last character of the result variable because it might also include output of EXPLAIN statement
# https://stackoverflow.com/questions/17542892/how-to-get-the-last-character-of-a-string-in-a-shell
#echo "${result: -1}"
result="${result: -1}"

if [ "$result" == "0" ]; then
  echo "Query results do NOT match!"
  ret=0
elif [ "$result" == "1" ]; then
  echo "Query results match!"
  ret=0
else
  echo "Query generated a runtime error"
  ret=2
fi

# We need to save the output in case the results do not match
echo $result > ../runit.retcode

if [ -f stdout0 ]; then
  cat stdout0
fi

exit $ret

# Time limit exceeded
#exit 3
# Security threat
#exit 8

############################################################
